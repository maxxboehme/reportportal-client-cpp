#pragma once

#include <reportportal/ijson_serializer.hpp>
#include <reportportal/log.hpp>
#include <string>
#include <uuid.h>
#include <optional>

namespace report_portal
{

class iservice
{
    public:
        /**
         *
         * @param[in] name
         * @param[in] start_time
         * @param[in] description
         * @param[in] uuid
         * @param[in] attributes
         * @param[in] mode
         * @param[in] is_rerun
         * @param[in] rerunof
         * @return
         */
        virtual begin_launch_responce begin_launch(
            const std::string& name,
            const std::chrono::high_resolution_clock::time_point& start_time,
            std::optional<std::string> description,
            std::optional<uuids::uuid> uuid,
            std::optional<attribute_map> attributes,
            std::optional<launch_mode> mode,
            std::optional<bool> is_rerun,
            std::optional<uuids::uuid> rerunof) = 0;

        virtual end_launch_responce end_launch(
            const uuids::uuid& uuid,
            const std::chrono::high_resolution_clock::time_point& endTime) = 0;

        /**
         *
         * @param[in] name name of the test item
         * @param[in] start_time time to use to specify when the test item started
         * @param[in] type the type of test item this is
         * @param[in] parent_uuid the uuid of the parent test item. If this test item is not parented to another test item pass in null uuid.
         * @param[in] launch_uuid the uuid of the launch this test item will be catagorized under.
         * @param[in] description the description for this test item
         * @param[in] attributes the attributes/tags for this test item
         * @param[in] uuid the uuid for this test item. If wanting to be autogenerated then pass in null uuid.
         * @param[in] coderef
         * @param[in] parameters
         * @param[in] retry
         * @param[in] has_stats
         * @return
         */
        virtual begin_test_item_responce begin_test_item(
            const std::string& name,
            const std::chrono::high_resolution_clock::time_point& start_time,
            test_item_type type,
            const uuids::uuid& launch_uuid,
            std::optional<uuids::uuid> parent_uuid,
            std::optional<std::string> description,
            std::optional<attribute_map> attributes,
            std::optional<uuids::uuid> uuid,
            std::optional<std::string> coderef,
            std::optional<std::map<std::string, std::string> > parameters,
            std::optional<bool> retry,
            std::optional<bool> has_stats) = 0;

        /**
         *
         * @param[in] uuid the uuid of the test_item ending
         * @param[in] end_time time to use to specify when the test item finished
         * @return
         */
        virtual end_test_item_responce end_test_item(
            const uuids::uuid& uuid,
            const uuids::uuid& launch_uuid,
            const std::chrono::high_resolution_clock::time_point end_time,
            std::optional<test_item_status> status,
            std::optional<issue> issue) = 0;


        virtual void batch_logs(const std::vector<log> logs) = 0;

        virtual ~iservice() {}
};

}
